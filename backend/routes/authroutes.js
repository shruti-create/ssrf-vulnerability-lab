import express from 'express';
import bodyParser from 'body-parser';
import fs from 'fs';
import Login from '../models/loginModel.js';

const router = express.Router();
router.use(bodyParser.urlencoded({ extended: true }));
router.use(bodyParser.json());

router.post('/api/random-names', (req, res) => {
  const count = parseInt(req.body.count) || 1; 
  const randomNames = getRandomNames(count);
  res.json({ count: count, names: randomNames }); 
});

function getRandomNames(count) {
  const names = [
    'Alice',
    'Bob',
    'Charlie',
    'David',
    'Emily',
    'Frank',
    'Grace',
    'Henry',
  ];

  const randomIndices = [];
  const randomNames = [];

  while (randomIndices.length < count) {
    const randomIndex = Math.floor(Math.random() * names.length);
    if (!randomIndices.includes(randomIndex)) {
      randomIndices.push(randomIndex);
      randomNames.push(names[randomIndex]);
    }
  }

  return randomNames;
}
router.post('/register', async (req, res) => {
  try {
    const { username, password, userType } = req.body;
    const existingUser = await Login.findOne({ username });
    if (existingUser) {
      return res.json({ success: false, error: 'Username already exists' });
    }

    const newUser = new Login({ username, password, userType });
    await newUser.save();
    res.json({ success: true });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await Login.findOne({ username, password });
    if (user) {
      console.log("success!!!!")
      res.json({ success: true, userType: user.userType });
    } else {
      res.json({ success: false, error: 'Invalid username or password' });
    }
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

router.get('/users', async (req, res) => {
  try {
    const users = await Login.find();
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});


router.delete('/users/:id', async (req, res) => {
  try {
    const deletedUser = await Login.findByIdAndRemove(req.params.id);
    if (deletedUser) {
      res.json({ message: 'User deleted successfully' });
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

router.route('/fetch-data')
  .post(async (req, res) => {
    const input = req.body.userInput;
    console.log(input);
      try {
        const content = fs.readFileSync('routes/textInstructions/'+input, {encoding:'utf8', flag: 'r'});
        res.status(200).send(content);
      } catch (innerError) {
        console.error('Error reading local file:', innerError);
        res.status(500).send('Error reading local file');
      }
    } 
  );


export default router;
