import express from 'express';
import bodyParser from 'body-parser';
import fs from 'fs';
import fetch from 'node-fetch';
import Login from '../models/loginModel.js';

const router = express.Router();
router.use(bodyParser.urlencoded({ extended: true }));
router.use(bodyParser.json());


router.post('/register', async (req, res) => {
  try {
    const { username, password, userType } = req.body;
    const existingUser = await Login.findOne({ username });
    if (existingUser) {
      return res.json({ success: false, error: 'Username already exists' });
    }

    const newUser = new Login({ username, password, userType });
    await newUser.save();
    res.json({ success: true });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await Login.findOne({ username, password });
    if (user) {
      console.log("success!!!!")
      res.json({ success: true, userType: user.userType });
    } else {
      res.json({ success: false, error: 'Invalid username or password' });
    }
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});


router.route('/fetch-data')
  .get(async (req, res) => {
    console.log("in fetch");

    const { userInput } = req.query;

    if (!userInput) {
      return res.status(400).send('Missing userInput parameter');
    }
    console.log("in fetch2");
    if (userInput.startsWith('file://')) {
      const filePath = userInput.slice(7);
      try {
        console.log("reached");
        const content = fs.readFileSync(filePath);
        console.log(content);
        //res.type(filePath);
        //res.status(200).send(content);
      } catch (error) {
        console.log("Exception occurred in fetch");

        console.error('Error reading local file:', error);
        res.status(500).send('Error reading local file');
      }
    } else if (userInput.startsWith('http://')) {
      try {
        const response = await fetch(userInput);
        const content = await response.text();
        res.set('Content-Type', response.headers.get('Content-Type'));
        res.status(200).send(content);
      } catch (error) {
        res.status(404).send('Error fetching remote URL');
      }
    } else {
      res.status(400).send('Invalid input');
    }
  })
  .post(async (req, res) => {
    console.log("In Post");
    
    const input = req.body.userInput;
    console.log(input);

    if (input.startsWith('file://')) {
      const filePath = input.slice(7);
      console.log("FilePath: " + filePath);
      try {
        const content = await fs.readFileSync(filePath, { encoding: 'utf8', flag: 'r' });
        console.log(content);
        //res.setHeader('content-type', 'text/plain');
        //res.type(filePath);
        res.send(content);
      } catch (error) {
        res.status(404).send('Error reading local file');
      }
    } else if (input.startsWith('http://')) {
      try {
        const response = await fetch(input);
        const content = await response.text();
        res.set('Content-Type', response.headers.get('Content-Type'));
        res.status(200).send(content);
      } catch (error) {
        res.status(404).send('Error fetching remote URL');
      }
    } else {
      res.status(400).send('Invalid input');
    } 
  });


router.post("/getUser", async (req, res) => {
  const { username } = req.query;

  try {
    const userData = await Login.findOne({ username });

    if (userData) {
      res.json(userData);
    } else {
      res.status(404).json({ error: "User not found" });
    }
  } catch (error) {
    console.error("Error fetching user:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

const data = [
  { id: 1, name: 'Item 1' },
  { id: 2, name: 'Item 2' },
  { id: 3, name: 'Item 3' },
];

router.post('/api/data', (req, res) => {
  res.json(data);
});

export default router;
